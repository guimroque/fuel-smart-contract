/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.38.0
  Forc version: 0.35.5
  Fuel-Core version: 0.17.3
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export type AssetErrorInput = Enum<{ InsufficientPayment: [], IncorrectAssetSent: [] }>;
export type AssetErrorOutput = AssetErrorInput;
export type AuthorisationErrorInput = Enum<{ SenderNotOwner: [] }>;
export type AuthorisationErrorOutput = AuthorisationErrorInput;
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export type RegistrationValidityErrorInput = Enum<{ NameNotRegistered: [], NameExpired: [], NameNotExpired: [], NameNotAvailable: [] }>;
export type RegistrationValidityErrorOutput = RegistrationValidityErrorInput;
export type ResultInput = Enum<{ Ok: T, Err: E }>;
export type ResultOutput = ResultInput;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type IdentityChangedEventInput = { name: string, new_identity: IdentityInput, previous_identity: IdentityInput };
export type IdentityChangedEventOutput = { name: string, new_identity: IdentityOutput, previous_identity: IdentityOutput };
export type NameRegisteredEventInput = { expiry: BigNumberish, name: string, owner: IdentityInput, identity: IdentityInput };
export type NameRegisteredEventOutput = { expiry: BN, name: string, owner: IdentityOutput, identity: IdentityOutput };
export type OwnerChangedEventInput = { name: string, new_owner: IdentityInput, previous_owner: IdentityInput };
export type OwnerChangedEventOutput = { name: string, new_owner: IdentityOutput, previous_owner: IdentityOutput };
export type RecordInput = { expiry: BigNumberish, identity: IdentityInput, owner: IdentityInput, name: string };
export type RecordOutput = { expiry: BN, identity: IdentityOutput, owner: IdentityOutput, name: string };
export type RegistrationExtendedEventInput = { duration: BigNumberish, name: string, new_expiry: BigNumberish };
export type RegistrationExtendedEventOutput = { duration: BN, name: string, new_expiry: BN };

interface CounterContractAbiInterface extends Interface {
  functions: {
    extend: FunctionFragment;
    register: FunctionFragment;
    set_identity: FunctionFragment;
    set_owner: FunctionFragment;
    expiry: FunctionFragment;
    getRecord: FunctionFragment;
    getRecordCount: FunctionFragment;
    identity: FunctionFragment;
    owner: FunctionFragment;
    recordByName: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'extend', values: [string, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'register', values: [string, BigNumberish, IdentityInput, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_identity', values: [string, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_owner', values: [string, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'expiry', values: [string]): Uint8Array;
  encodeFunctionData(functionFragment: 'getRecord', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'getRecordCount', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'identity', values: [string]): Uint8Array;
  encodeFunctionData(functionFragment: 'owner', values: [string]): Uint8Array;
  encodeFunctionData(functionFragment: 'recordByName', values: [string]): Uint8Array;

  decodeFunctionData(functionFragment: 'extend', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'register', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_identity', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_owner', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'expiry', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'getRecord', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'getRecordCount', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'identity', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'owner', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'recordByName', data: BytesLike): DecodedValue;
}

export class CounterContractAbi extends Contract {
  interface: CounterContractAbiInterface;
  functions: {
    extend: InvokeFunction<[name: string, duration: BigNumberish], void>;
    register: InvokeFunction<[name: string, duration: BigNumberish, owner: IdentityInput, identity: IdentityInput], RecordOutput>;
    set_identity: InvokeFunction<[name: string, identity: IdentityInput], void>;
    set_owner: InvokeFunction<[name: string, owner: IdentityInput], void>;
    expiry: InvokeFunction<[name: string], ResultOutput<BN, RegistrationValidityErrorOutput>>;
    getRecord: InvokeFunction<[index: BigNumberish], ResultOutput<RecordOutput, RegistrationValidityErrorOutput>>;
    getRecordCount: InvokeFunction<[], BN>;
    identity: InvokeFunction<[name: string], ResultOutput<IdentityOutput, RegistrationValidityErrorOutput>>;
    owner: InvokeFunction<[name: string], ResultOutput<IdentityOutput, RegistrationValidityErrorOutput>>;
    recordByName: InvokeFunction<[name: string], ResultOutput<RecordOutput, RegistrationValidityErrorOutput>>;
  };
}
